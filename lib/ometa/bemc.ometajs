var xjst = require('xjst'),
    XJSTParser = xjst.XJSTParser,
    XJSTIdentity = xjst.XJSTIdentity,
    Jail = require('./jail').Jail;

ometa BEMCParser <: XJSTParser {
  isKeyword = :x ?(x === 'applyCtx')
            | ^isKeyword,

  bemMatch = bemBlock | bemElem | bemMod,

  bemVal = letter:x (letter | digit | '-')*:xs -> [#string, x + xs.join('')],
  bemVal = asgnExpr:e -> e,

  bemPredic :n = spaces seq(n):nn space+ -> nn,

  bemBlock = bemPredic('block'):n bemVal:v -> [#block, v],
  bemElem = bemPredic('elem') bemVal:v -> [#elem, v],
  bemMod = bemPredic('mod') bemVal:m space+ bemVal:v -> [#blockMod, m, v],
  bemMod = bemPredic('elemMod') bemVal:m space+ bemVal:v -> [#elemMod, m, v],

  bemCustom = asgnExpr:e -> [#xjst, e],

  bemcSet = spaces <letter (letter | digit | '-')*>:nn
               &(spaces ('{' | ':' | ','))
               ?(!BEMCParser._isPrimitive(nn))
               -> [ nn ],

  bemMatchAndSet = (bemMatch | bemcSet | bemCustom),
  listBemMatchAndSet %(this.predicates = []) = bemMatchAndSet:t spaces
                     ( ',' spaces listBemMatchAndSet:ts -> {
                       BEMCParser._concatChildren(t, ts)
                     } | '{' spaces listBemMatchAndSet+:ts spaces '}'
                          spaces -> {
                       BEMCParser._concatChildren(t, [#sub, ts])
                     } | ':' (asgnExpr:e -> [#begin, [#return, e]]
                             | stmt):c ','? ->
                       [t, [#body, Jail.match(
                         c,
                         'topLevel',
                         ['_$' + (BEMCParser._jailId++).toString(36)]
                       )]]
                     ):r -> {
                       if (this.predicates.length === 0) return r;
                       BEMCParser._concatChildren(
                         [#xjst, this.predicates],
                         r
                       )
                     },

  applyMode :type = "apply" "(" expr:e ")"
                    { BEMCParser._transMode(e) }:modded_e
                    applyFactory([type, modded_e]):r -> r
                  | "applyNext" "(" expr:e ")"
                    { BEMCParser._transMode(e) }:modded_e
                    applyFactory([type, #next, modded_e]):r -> r,

  applyCtx :type "applyCtx" "(" expr:ctx ")" = {
        BEMCParser._transMode([
          #binop, ',',
          [#set, [#getp, [#string, 'ctx'], [#this] ], ctx],
          [#string, '']
        ])
      }:modded_e
      applyFactory([type, #next, modded_e]):r -> r,

  primExprHd = applyMode(#expr):r -> r
             | applyCtx(#expr):r -> r
             | ^primExprHd,

  stmt       = applyMode(#stmt):r -> r
             | applyCtx(#stmt):r -> r
             | ^stmt,

  topLevel = listBemMatchAndSet*:ts spaces end -> {
    BEMCParser._addElemPredic(BEMCParser._dropAllSubs(ts))
  }
}

BEMCParser._jailId = 0;

BEMCParser._transMode = function transMode(e) {
    function traverse(e) {
    if (e[0] !== 'binop' && e[1] !== ',') return [ e ];
    return [].concat(traverse(e[2]), traverse(e[3]));
  }

  return traverse(e).map(function (e) {
    if (e[0] !== 'string') return e;
    return [#set, [#getp, [#string, '_mode'], [#this]], e];
  }).reduce(function (acc, current) {
    return [#binop, ',', acc, current];
  });
};

BEMCParser._primitives = {
  'true': true,
  'false': true,
  'null': true,
  'undefined': true,
  'NaN': true,
  'Infinity': true
};

BEMCParser._isPrimitive = function(name) {
  return BEMCParser._primitives[name];
};

BEMCParser._concatChildren = function(p, cs) {
  if (cs[0] !== 'sub') return [p].concat(cs);

  return [#sub, [].concat.apply([], cs[1].map(function(cs) {
    var cc = BEMCParser._concatChildren(p, cs);
    return cc[0] === 'sub' ? cc[1] : [cc];
  }))];
};

BEMCParser._dropAllSubs = function(ts) {
  return [].concat.apply([], ts.map(function(t) {
    return t[0] === 'sub' ? t[1] : [t];
  }));
};

BEMCParser._addElemPredic = function(ts) {
  function isSafePredic(p) {
    switch (p[0]) {
      case 'get':
      case 'string':
      case 'number':
        return true;
      case 'getp':
        // Either this["some not elem property"],
        // or (some other host)["any property"]
        return p[2][0] === 'this' ?
            p[1][0] !== 'call' &&
            (p[1][0] !== 'string' || p[1][1] !== 'elem')
            :
            p[2][0] !== 'call';
      case 'unop':
        return isSafePredic(p[2]);
      case 'binop':
        return isSafePredic(p[2]) && isSafePredic(p[3]);
      default:
        return false;
    }
  }

  ts.forEach(function(t) {
    var isBlock,
        isNotElem;

    isBlock = t.some(function(p) {
      return p[0] === 'block';
    });

    if (!isBlock) return;

    isNotElem = t.every(function(p) {
      if (p[0] === 'elem' ||
          p[0] === 'xjst' && !isSafePredic(p[1])) {
        return false;
      }

      return true;
    });

    if (!isNotElem) return;

    t.unshift([
      'xjst',
      ['unop', '!', ['getp', ['string', 'elem'], ['this']]]
    ]);
  });
  return ts;
};

ometa BEMCToXJST <: XJSTIdentity {
  bhPredic = [#block :e] -> [
    #binop, '===',
    [#getp, [#string, 'block'], [#this]],
    e
  ],
  bhPredic = [#blockMod :m :v] -> [
    #binop, '&&',
    [#getp, [#string, 'mods'], [#this]],
    [ #binop, '===',
      [#getp, m, [#getp, [#string, 'mods'], [#this]]],
      v
    ]
  ],
  bhPredic = [#elem :e] -> [
    #binop, '===',
    [#getp, [#string, 'elem'], [#this]],
    e
  ],
  bhPredic = [#elemMod :m :v] -> [
    #binop, '&&',
    [#getp, [#string, 'elemMods'], [#this]],
    [ #binop, '===',
      [#getp, m, [#getp, [#string, 'elemMods'], [#this]]],
      v
    ]
  ],
  bhPredic = [#xjst :e] -> e,
  bhPredic = [:m] -> [
    #binop, '===',
    [#getp, [#string, '_mode'], [#this]],
    [#string, m]
  ],

  bhBody = [#body :b] -> b,

  bhTemplate = [bhPredic+:ps bhBody:b] -> [
    #template,
    BEMCToXJST.cons(ps),
    b
  ],

  topLevel = [bhTemplate+:ts] -> ts,
  topLevel = bhTemplate:t -> [t],
  topLevel = empty -> []
}

BEMCToXJST.cons = function cons(arr) {
  return arr.reduce(function(prev, curr) {
    return ['binop', '&&', prev, curr];
  });
};
